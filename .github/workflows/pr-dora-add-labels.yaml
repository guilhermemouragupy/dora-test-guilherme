name: DORA - PR Validation - Add Labels from Service Path

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  label-from-path:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      issues: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get list of changed files
        id: changed
        run: |
          echo "files=$(git diff --name-only origin/main...HEAD | xargs)" >> "$GITHUB_OUTPUT"

      - name: Detect labels from service path
        id: detect
        run: |
          declare -A path_to_labels
          total_docs=$(yq eval 'splitDoc' catalog-info.yaml | yq eval 'length' -)

          for i in $(seq 0 "$((total_docs - 1))"); do
            kind=$(yq eval "select(documentIndex == $i) | .kind" catalog-info.yaml)
            if [[ "$kind" == "Component" ]]; then
              name=$(yq eval "select(documentIndex == $i) | .metadata.name" catalog-info.yaml)
              paths=$(yq eval "select(documentIndex == $i) | .metadata.annotations.\"gupy.io/service-path\"" catalog-info.yaml)

              # Suporte a múltiplos paths separados por vírgula
              IFS=',' read -ra path_array <<< "$paths"
              for path in "${path_array[@]}"; do
                clean_path=$(echo "$path" | xargs)
                if [[ -n "$clean_path" ]]; then
                  path_to_labels["$clean_path"]+="$name "
                fi
              done
            fi
          done

          changed_files=(${{ steps.changed.outputs.files }})
          declare -A final_labels

          for file in "${changed_files[@]}"; do
            for path in "${!path_to_labels[@]}"; do
              if [[ "$file" == "$path"* ]]; then
                for label in ${path_to_labels[$path]}; do
                  final_labels["$label"]=1
                done
              fi
            done
          done

          # Gera JSON array válido e compacto
          label_list_json=$(printf '%s\n' "${!final_labels[@]}" | jq -R . | jq -s -c .)
          echo "labels=$label_list_json" >> "$GITHUB_OUTPUT"

      - name: Add labels to PR
        if: steps.detect.outputs.labels != '[]'
        uses: actions/github-script@v7
        with:
          script: |
            const labels = JSON.parse('${{ steps.detect.outputs.labels }}').filter(l => l.trim() !== '');
            if (labels.length > 0) {
              console.log('✅ Labels a adicionar:', labels);
              await github.rest.issues.addLabels({
                issue_number: context.payload.pull_request.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                labels: labels,
              });
            } else {
              console.log('ℹ️ Nenhuma label válida detectada. Nada será adicionado.');
            }
